const Reservations = require('../models/reservationsModel');
const { validateServiceTime } = require('../models/reservationsModel');

exports.getReservations = async (req, res) => {
    try {
        console.log("User Info from Token:", req.user);

        // ‚úÖ Fetch all reservations from the database
        const allReservations = await Reservations.getAllReservations();
        console.log("üîπ All reservations from DB:", allReservations);

        // ‚úÖ If no user (public request), return only future reservations
        if (!req.user) {
            console.log("üîπ Public request: Showing only available reservations (no client info)");
            const now = new Date().toISOString();

            const filteredReservations = allReservations
                .filter(r => new Date(r.datetime).toISOString() >= now) // Only future reservations
                .map(r => ({
                    datetime: r.datetime,
                    table_id: r.table_id // Show table but NOT client details
                }));

            console.log("üì§ Public reservations sent to frontend:", filteredReservations);
            return res.json(filteredReservations);
        }

        // ‚úÖ Admins see everything
        if (req.user.isAdmin) {
            console.log("‚úÖ Admin fetching all reservations...");
            return res.json(allReservations);
        }

        // ‚úÖ Clients see only their own reservations
        console.log(`Client ${req.user.id} fetching their reservations...`);
        const userReservations = await Reservations.getClientReservations(req.user.id);
        return res.json(userReservations);
    } catch (error) {
        console.error("Error in getReservations:", error);
        res.status(500).json({ error: error.message });
    }
};







exports.createReservation = async (req, res) => {
    console.log("üì• Requ√™te re√ßue pour cr√©ation de r√©servation:", req.body);

    const { table_id, datetime, num_people } = req.body;

    try {
        if (!table_id || !datetime || !num_people) {
            console.error("‚ùå Donn√©es manquantes:", { table_id, datetime, num_people });
            return res.status(400).json({ error: "Toutes les donn√©es de r√©servation sont requises." });
        }

        if (!Reservations.validateServiceTime(datetime)) {
            console.error("‚ùå Heure de r√©servation invalide:", datetime);
            return res.status(400).json({ error: "L'heure de r√©servation ne correspond √† aucun service disponible." });
        }

        // ‚úÖ Prevent multiple reservations per user on the same day
        const userReservations = await Reservations.getClientReservations(req.user.id);
        const dateOnly = datetime.split('T')[0]; // Extract YYYY-MM-DD

        const existingReservation = userReservations.find(res =>
            new Date(res.datetime).toISOString().startsWith(dateOnly)
        );
        if (existingReservation) {
            console.error("‚ùå Conflit de r√©servation: L'utilisateur a d√©j√† r√©serv√© ce jour-l√†.");
            return res.status(400).json({ error: "Vous avez d√©j√† une r√©servation pour ce jour-l√†." });
        }

        // ‚úÖ Prevent duplicate reservations for the same table/time
        const conflict = await Reservations.checkReservationConflict(table_id, datetime);
        if (conflict) {
            console.error("‚ùå Conflit d√©tect√©: La table est d√©j√† r√©serv√©e.", conflict);
            return res.status(400).json({ error: "Cette table est d√©j√† r√©serv√©e pour ce service √† cette date/heure." });
        }

        console.log("‚úÖ Donn√©es valides, cr√©ation de la r√©servation...");
        const reservation = await Reservations.createReservation(req.user.id, table_id, datetime, num_people);
        return res.status(201).json(reservation);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©servation:", error);
        return res.status(500).json({ error: error.message });
    }
};






// Mettre √† jour une r√©servation
exports.updateReservation = async (req, res) => {
    const reservationId = req.params.id;
    const { table_id, datetime } = req.body;

    try {
        // V√©rifier que la r√©servation existe
        const existingReservation = await Reservations.getReservationById(reservationId);
        if (!existingReservation) {
            return res.status(404).json({ error: 'R√©servation non trouv√©e' });
        }

        // Si ce n'est pas un admin, v√©rifier que la r√©servation appartient bien au client connect√©
        if (!req.user.isAdmin && existingReservation.client_id !== req.user.id) {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }

        // V√©rifier si l'heure fournie correspond √† un service valide
        if (!Reservations.validateServiceTime(datetime)) {
            return res.status(400).json({ error: 'L\'heure de r√©servation ne correspond √† aucun service disponible.' });
        }

        // V√©rifier les conflits d‚Äôhoraire pour la table demand√©e
        const conflict = await Reservations.checkReservationConflict(table_id, datetime, reservationId);
        if (conflict) {
            return res.status(400).json({ error: 'La table est d√©j√† r√©serv√©e pour ce service √† cette date/heure.' });
        }

        // Effectuer la mise √† jour de la r√©servation
        const updatedReservation = await Reservations.updateReservation(reservationId, { table_id, datetime });
        res.json(updatedReservation);
    } catch (error) {
        console.error("Erreur lors de la mise √† jour de la r√©servation :", error);
        res.status(500).json({ error: error.message });
    }
};



// Supprimer une r√©servation
exports.deleteReservation = async (req, res) => {
    const reservationId = req.params.id;

    try {
        // V√©rifier que la r√©servation existe
        const existingReservation = await Reservations.getReservationById(reservationId);
        if (!existingReservation) {
            return res.status(404).json({ error: 'R√©servation non trouv√©e' });
        }

        // Si ce n'est pas un admin, v√©rifier que la r√©servation appartient bien au client connect√©
        if (!req.user.isAdmin && existingReservation.client_id !== req.user.id) {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }

        // Supprimer la r√©servation
        await Reservations.deleteReservation(reservationId);
        res.json({ message: 'R√©servation supprim√©e avec succ√®s' });
    } catch (error) {
        console.error("Erreur lors de la suppression de la r√©servation :", error);
        res.status(500).json({ error: error.message });
    }
};

