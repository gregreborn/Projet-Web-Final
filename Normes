# Normes de programmation

Les normes départementales de ce document doivent être respectées dans tous les cours et langages de programmation où elles peuvent s'appliquer.

Règles spécifiques:

  - [JavaScript](NormesJS.md)

## Langue

Le code peut être en anglais ou en français, mais doit être constant. Tandis que la documentation, les commentaires, et les interfaces utilisateurs doivent obligatoirement être en français.

## Inclusions ##

Limiter les inclusions, importations, utilisations, etc. à ce qui est nécessaire au code présent dans le fichier :

```cpp
#include <iostream>
// ^^^^^^^^^^^^^^^^ Ne devrait pas être présent puisqu'inutilisé.

int main() {
  return 0;
}
```

## Identificateurs

Les identificateurs de structure, classe, constante, donnée membre, variable, méthode, et fonction doivent être significatifs.

De plus, pour une meilleure intercompatibilité, les règles suivantes devraient être respectées :

- Débuter par une lettre ou un trait de soulignement « _ ».
- Contenir que des lettres, des chiffres, et des traits de soulignement « _ ». (Pas d'accents, ni de caractères spéciaux.)
- Ne pas être un terme réservé par les langages de programmation.

### Constantes

Pour être plus distinguables des autres identificateurs, ceux des constantes doivent contenir que des lettres majuscules, et des traits de soulignement « _ » pour séparer les termes :

```cpp
#define TAILLE_MAXIMALE 42
```

### Variables

Les identificateurs de données membres, de variables, de méthodes, et de fonctions, doivent utiliser la casse de chameau « camel case », c'est-à-dire commencer par un caractère minuscule, et utiliser un caractère majuscule au début des termes suivants :

```cpp
bool identificateurDeVariableBooleenne = true;
```

### Fonctions

Une fonction ne devrait pas contenir moins de deux lignes, et au maximum une trentaine de lignes de code. Il est conseillé que son identificateur comporte un verbe à l'infinitif précisant ce que réalise la fonction.

Les paramètres devraient être ordonnés de sorte à pouvoir définir le plus d'arguments par défaut possible afin de réduire le nombre de paramètres de chacune des fonctions.

### Classes

Les identificateurs d'espace de nom, de structure, de classe, etc., doivent utiliser la casse pascal « studle caps », en débutant par un caractère majuscule :

```cpp
class Utilisateur {};
class SuperUtilisateur {};
```

## Propreté

Tout code source doit être le plus concis possible, tout en restant visuellement agréable et facile à lire.

Les remises ne devraient pas contenir de code de débogage.

### Aération

Comme dans tous textes, les gros morceaux de code doivent être séparés en paragraphes afin d'être plus agréables à lire, mais il ne devrait pas y avoir plus de 2 sauts de lignes consécutifs.

Chaques éléments importants doivent aussi être séparés par une ligne vide. Par exemple: entre les inclusions et la classe, entre les constantes et les propriétés, entre les propriétés et méthodes et entre chaque méthodes.

Les opérateurs unaires doivent être adjacents aux identificateurs tandis que les opérateurs binaires doivent être précédés et suivis d'un espace :

```cpp
int variableC = ++variableA * variableB++;
```

### Commentaires

Seul les morceaux de code non triviaux ou redondants doivent être commentés afin d'expliquer leur algorithme.

Les remises ne devraient pas contenir de code en commentaire inutilement.

### Indentation

Il doit y avoir une indentation suite aux accolades ouvrantes, aux modificateurs d'accès, aux if, aux else, aux while, aux for, et aux case :

```cpp
class Classe {
public:
  void methode(int valeurEntiere) {
    switch (valeurEntiere) {
      default:
        for (int i = 0; i < 1000; i++)
          if (valeurEntiere < 42)
            valeurEntiere++;
          else
            valeurEntiere--;          
        break;
    }
  }
};
```

L'indentation doit être faite avec des tabulations.

### Accolades

L'accolade ouvrante ( `{` ) doit être à la fin de la ligne et précédé d'un espace.

Il est préférable d'utiliser des accolades même lorsqu'elles sont optionnelles dans le langage

```cpp
if (condition) {
  instruction();
}
```

### Pléonasmes

Évitez les pléonasmes de programmeur :

```cpp
// if (estValide == true) {}
if (estValide) {}

// if (count != 0) {}
if (count) {}

/*
if (estValide)
  enMarche = true;
else
  enMarche = false;
*/
enMarche = estValide;
```

### Redondance

Évitez les redondances et les lignes inutiles :

```cpp
/*
if (estValide) {
  instructionA();
  instructionC();
}
else {
  instructionB();
  instructionC();
}
*/
if (estValide)
  instructionA();
else
  instructionB();
instructionC();

int fonction() {
  if (estValide)
    return 42;
  // else
  return -1;
}
```

# Documentation

Le format « doxygen » permet de générateur automatiquement de la documentation à partir de commentaires dans le code source :

## Fichiers

Tous les fichiers doivent avoir un en-tête :

```cpp
/// @file Fichier.ext
/// @brief Brève description.
/// @authors Prénom Nom, Prénom Nom, ...
```

## Structures et Classes

Toutes les déclarations de structure et de classe doivent avoir un en-tête :

```cpp
/// @class Classe
/// @brief Brève description.
/// @tparam Modele Description du paramètre modèle
template <typename Modele>
class Classe {
  // ...
};
```

## Données membres

Toutes les données membres doivent être suivies d'une brève description :

```cpp
int variable; ///< Description.
```

## Fonctions et Méthodes

Toutes les fonctions et méthodes doivent avoir un en-tête :

```cpp
/// @brief Brève description.
/// @param parametreA Description du paramètre A.
/// @param parametreB Description du paramètre B.
/// @return Description du retour.
int fonction(int parametreA, float parametreB) {
  // ...
  return resultat;
}
```

# Normes pour système de gestion de versions

Les normes départementales de ce document doivent être respectées dans tous les cours utilisant un système de gestion de versions.

## Techniques

...

## Structure

À la racine de votre dépôt de données (repository), il doit y avoir un fichier README.md contenant votre nom complet.

Les fichiers innutiles aux remises doivent être absents du dépôt de données ou dans le fichier .gitignore.
Comme exemple : les dossiers de configuration vscode et jetbrains, les journaux, les fichiers générés par un gestionnaire de dépendances composer et nugget, etc.

Évitez les sous-dossiers inutiles. Un dépôt de donnée d'un seul projet devrait avoir son fichier principal d'exécution à la racine.

Ne pas quantifier ou qualifier vos dossiers : TP1_v5, TP1_Bon, etc.

Ne pas téléverser de fichiers compressés : .zip, .7z, etc.

## Message de soumission

Les messages de soumissions doivent être significatifs, clairs et concis.

```
Type (Portée) - Sujet
```

*Un message détaillé est optionnel si nécessaire.*

### Type

|Type |Description|
|-----|-----------|
|Ajout|Ajout d'une nouvelle fonctionnalité, de fichiers, etc.|
|Conflit|Gestion de conflit, etc.|
|Correction|Correction d'un problème, d'un bogue, etc.|
|Divers|Configuration de projet, de compilation, etc.|
|Documentation|Documentation, commentaires, etc.|
|Réorganisation|Réorganisation, changement de paradigme, etc.|
|Test|Test, exemple, etc.|
|...|...|

### Portée

Ce qui est affecté par la soumission.

### Sujet

Brève (pas plus de 80 caractères) description de la soumission.
